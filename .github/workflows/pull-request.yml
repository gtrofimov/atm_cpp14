name: Running gtests on pull request to main
on:
  # Triggers the workflow pull request events but only for the master (main) branch.
  pull_request:
    branches: [ master, main ]

env:
  LINE_COV_GATE: 29
  MCDC_COV_GATE: 35

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build and Test
    runs-on: self-hosted
    continue-on-error: true

    steps:
    - uses: actions/checkout@v2

    # Set up properties file
    - name: set up properties file
      run: |
        echo  -e "\n~~~\nSetting up and creating cpptestcli.properties file.\n"
        echo $"
        parasoft.eula.accepted=true
        cpptest.license.network.edition=server_compliance_edition
        license.network.enabled=true
        license.network.auth.enabled=true
        license.network.password=${{secrets.LSS_PASS}}
        license.network.url=${{secrets.LSS_URL}}
        license.network.user=${{vars.LSS_USER}}
        dtp.url=${{secrets.DTP_URL}}
        dtp.user=${{vars.LSS_USER}}
        dtp.password=${{secrets.LSS_PASS}}
        dtp.project=ATM
        scope.scontrol=true
        report.suppressed_msgs=true
        scontrol.rep1.type=git
        scontrol.rep1.git.url=https://github.com/${{github.repository}}
        scontrol.git.exec=git
        logging.verbose=true
        dtp.additional.settings=report.coverage.images\=all;cpptest_ut
        report.dtp.publish=false" >> cpptestcli.properties

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}
      run: cmake -DCPPTEST_HOME=$CPPTEST_CT -DCPPTEST_COVERAGE=ON -S . -B build

    - name: Build 
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build build
      run: cmake --build build

    - name: Run Tests
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        rm -rf /cpptest-coverage/ATM_Cpp14_lib/ATM_Cpp14_lib.clog 
        rm -rf gtest_results.xml
        ./atm_gtest --gtest_output=xml:atm_gtest_results.xml
      continue-on-error: true

    - name: Generate Reports
      working-directory: ${{github.workspace}}/build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: make cpptestcov-compute cpptestcov-suppress cpptestcov-report 
 
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: CpptestReports
        include-hidden-files: true
        path: |
          ${{github.workspace}}/.coverage/*.*

    - name: Line Coverage Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      # Query for project's coverage and compare with the gate requirements
      run: NUMBER=$(cpptestcov query -coverage LC .coverage) && if [ $NUMBER -lt $LINE_COV_GATE ]; then echo "Line coverage quality gate failed"; echo "Expected result $LINE_COV_GATE%, achieved $NUMBER%"; false; else echo "Line coverage quality gate passed with $NUMBER% (required $LINE_COV_GATE%)"; true; fi      
      
    - name: MCDC Coverage Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      # Query for project's coverage and compare with the gate requirements
      run: NUMBER=$(cpptestcov query -coverage MCDC .coverage) && if [ $NUMBER -lt $MCDC_COV_GATE ]; then echo "MCDC coverage quality gate failed"; echo "Expected result $MCDC_COV_GATE%, achieved $NUMBER%"; false; else echo "MC/DC coverage quality gate passed with $NUMBER% (required $MCDC_COV_GATE%)"; true; fi  